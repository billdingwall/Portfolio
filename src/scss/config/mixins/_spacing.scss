//------------------------------------------------------------//

// * Stencil Mixins
// * 1. siteContainer()
// * used for basic structuring of the site content
// * 2. media-query()
// * used to dynamically write namespaced classes per
//   screen size; "sm" works on small screens and up.
// * 3. min-width()
// * used in the flow of styles. Can be nested and
//   used to add styles based on screen width. Width up.
// * 4. max-width()
// * used in the flow of styles. Can be nested and
//   used to add styles based on screen width. Width down.

// Notes:
// * min-width / max-width may be included in newer Sass v3+
// * do we need this media-query mixin? can we simplify?

// TODO : look into newer SASS media queries further
// TODO : look into simplifying media-query

//------------------------------------------------------------//

// * 1. siteContainer()

// * Example
//
//   .Component {
//    @include siteContainer;
//   }

@mixin siteContainer {
  max-width: 1300px;
  width: 100%;
  margin: 0 auto;
}

// * 2. media-query()

// * Example
//
//   @each $breakpoint in $breakpoints {
//     $alias:     nth($breakpoint, 1);
//     $condition: nth($breakpoint, 2);
//     @include media-query($alias) {
//       .Component-#{$alias} {
//         /responsive style/
//       }
//     }
//   }

@mixin media-query($mq) {

  $breakpoint-found: false;

  // Loop through the list of breakpoints we’ve provided in our settings file.
  @each $breakpoint in $breakpoints {

    // Grab the alias and the condition from their respective locations in
    // the list.
    $alias:     nth($breakpoint, 1);
    $condition: nth($breakpoint, 2);

    // If the media query we’ve specified has an alias and a condition...
    @if $mq == $alias and $condition {

      // ...tell the mixin that we’ve found it...
      $breakpoint-found: true;

      // ...and spit it out here.
      @media #{$condition} {
        @content;
      }

    }

  }

  // If the user specifies a non-exitent alias, send them a warning.
  @if $breakpoint-found == false{
    @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
  }

}

// * 3. min-width()

// * Example
//
//   .Component {
//    /styles/
//    @include min-width('md') {
//      /responsive styles/
//    }
//   }

@mixin min-width($width) {

  @if $width == xs {
    @media only screen and (min-width: $breakpoint-xs) {
      @content;
    }
  }

  @else if $width == sm {
    @media only screen and (min-width: $breakpoint-sm) {
      @content;
    }
  }

  @else if $width == md {
    @media only screen and (min-width: $breakpoint-md) {
      @content;
    }
  }

  @else if $width == lg {
    @media only screen and (min-width: $breakpoint-lg) {
      @content;
    }
  }

}

// * 4. max-width()

// * Example
//
//   .Component {
//    /styles/
//    @include max-width('md') {
//      /responsive styles/
//    }
//   }

@mixin max-width($width) {

  @if $width == xs {
    @media only screen and (max-width: $breakpoint-xs) {
      @content;
    }
  }

  @else if $width == sm {
    @media only screen and (max-width: $breakpoint-sm) {
      @content;
    }
  }

  @else if $width == md {
    @media only screen and (max-width: $breakpoint-md) {
      @content;
    }
  }

  @else if $width == lg {
    @media only screen and (max-width: $breakpoint-lg) {
      @content;
    }
  }

}