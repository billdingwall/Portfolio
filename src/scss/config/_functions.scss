//------------------------------------------------------------//

// * Stencil Functions
// * 1. Basic Math Helper Functions
// * 2. Font Scaling Function
// * 3. Color Scaling Function
// * 4. Grid Scaling Function

// Notes:
// * Scale functions are used to create consistancy on our
// spacing, font sizing, and color varients

// TODO : look at updating scaleGrid() to use negative steps

//------------------------------------------------------------//

// * 1. Basic Math Helper Functions

@function quarter($number) {
  $number: round($number / 4);
  @return $number
}

@function halve($number) {
  $number: round($number / 2);
  @return $number
}

@function double($number) {
  $number: round($number * 2);
  @return $number
}

@function quadruple($number) {
  $number: round($number * 4);
  @return $number
}

@function convertNegative($number) {
  $number: $number * -1;
  @return $number
}

// * 2. Font Scaling Function

@function scaleFont($property, $step) {

  $ratio: $font-ScaleRate;

  // handles nagative steps for font scale
  @if ($step < 0) {
    $step: convertNegative($step);
    @for $i from 1 through $step {
      $property: $property / $ratio;
    }
  }

  // handles base & positive steps for font scale
  @else if ($step > 0) {
    @for $i from 1 through $step {
      $property: $property * $ratio;
    }
  }

  // round pixel values to nearest whole number
  @if (unit($property) == 'px') {
    $property: round($property);
  }

  @return $property;

}

// * 3. Grid Scaling Function

@function scaleGrid($step) {

  // common rules of our spacing scale
  $base-unit: $baseUnit;

  // setting the base $spacing variable as the base unit
  $spacing: $base-unit;

  // Handles lower steps below base unit (2, 4)
  @if ($step < .5) {
    $spacing: round($spacing * 0.25);
  }
  @else if ($step >= .5) and ($step < 1) {
    $spacing: round($spacing * 0.5);
  }

  // Handles steps equal to or about base unit
  @else {
    $spacing: round($spacing * $step);
  }

  @return $spacing;

}

// * 4. HSB color input 

@function hsb($h-hsb, $s-hsb, $b-hsb, $a: 1) {
  @if $b-hsb == 0 {
    @return hsla(0, 0, 0, $a)
  } @else {
    $l-hsl: ($b-hsb/2) * (2 - ($s-hsb/100));
    $s-hsl: ($b-hsb * $s-hsb) / if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2);
    @return hsla($h-hsb, $s-hsl, $l-hsl, $a);
  }
}